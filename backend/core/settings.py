"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'uma-chave-secreta-padrao-para-desenvolvimento')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Aplicações de terceiros
    'django_extensions',  # Para usar o shell_plus e outras funcionalidades úteis
    # Nossas Apps
    'chatbot',
    'webhook',
    'telegram_bridge',
    'twilio_bridge',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


import sys

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'chatwoot', # Alterado para usar o mesmo DB do Chatwoot
        'USER': 'postgres',
        'PASSWORD': 'senha_do_postgres',
        'HOST': 'postgres',  # O nome do nosso serviço no docker-compose
        'PORT': '5432',
    }
}

# Use um banco de dados em memória para os testes para evitar a dependência do Postgres
if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuração de E-mail para desenvolvimento (MailHog)
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'mailhog'
    EMAIL_PORT = 1025

# --- Configuração do Twilio ---
# As credenciais são carregadas do ambiente, independentemente do modo DEBUG.
TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')
TWILIO_WHATSAPP_NUMBER = os.environ.get('TWILIO_WHATSAPP_NUMBER') # Ex: 'whatsapp:+14155238886'
TWILIO_INBOX_ID = os.environ.get('TWILIO_INBOX_ID')

# --- Configuração do Chatwoot ---
# É recomendado usar variáveis de ambiente para dados sensíveis.
CHATWOOT_BASE_URL = os.environ.get('CHATWOOT_BASE_URL') # Ex: http://localhost:3000
CHATWOOT_ACCOUNT_ID = os.environ.get('CHATWOOT_ACCOUNT_ID') # Ex: 1
CHATWOOT_ACCESS_TOKEN = os.environ.get('CHATWOOT_ACCESS_TOKEN') # Token do seu Agente de API (para fazer chamadas)
CHATWOOT_BOT_TOKEN = os.environ.get('CHATWOOT_BOT_TOKEN') # Token de verificação do Agent Bot (para receber chamadas)

# URL da API construída para uso nas views
CHATWOOT_API_URL = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{CHATWOOT_ACCOUNT_ID}" if CHATWOOT_BASE_URL and CHATWOOT_ACCOUNT_ID else None

# --- Configuração da IA (Google Gemini) ---
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
GEMINI_SYSTEM_PROMPT = os.environ.get('GEMINI_SYSTEM_PROMPT', 'Você é um assistente virtual. Responda de forma amigável e ajude os usuários com suas dúvidas.')
GEMINI_HANDOFF_PROMPT = os.environ.get(
    'GEMINI_HANDOFF_PROMPT',
    """
Você é um assistente de triagem para uma equipe de suporte.
Sua função é fazer até 3 perguntas para entender o problema do usuário.
Seja breve e direto. Não tente resolver o problema.
Após as 3 perguntas, agradeça e informe que um especialista entrará em contato.
"""
)

# --- Configuração do Telegram ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_INBOX_ID = os.environ.get('TELEGRAM_INBOX_ID')
