
services:
  base: &base
    image: chatwoot/chatwoot:latest
    env_file: .env ## Change this file for customized env variables
    volumes:
      - storage_data:/app/storage

  rails:
    <<: *base
    depends_on:
      - postgres
      - redis
    ports:
      - '127.0.0.1:3000:3000'
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    entrypoint: docker/entrypoints/rails.sh
    command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']
    restart: always
    networks:
      - minha-rede
 
  sidekiq:
    <<: *base
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    restart: always
    networks:
      - minha-rede
 
  postgres:
    image: pgvector/pgvector:pg16
    restart: always
    ports:
      - '127.0.0.1:5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: .env
    networks:
      - minha-rede
 
  redis:
    image: redis:alpine
    restart: always
    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\""]
    env_file: .env
    volumes:
      - redis_data:/data
    ports:
      - '127.0.0.1:6379:6379'
    networks:
      - minha-rede
 

  backend:
    build:
      context: ./backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    env_file: .env
    ports:
      - '127.0.0.1:8000:8000'
    depends_on:
      - postgres

  # Serviço do Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    # Para obter o TUNNEL_TOKEN, crie um túnel no painel do Cloudflare
    # e copie o token que é exibido no comando de instalação.
    # Exemplo: sudo cloudflared service install <SEU_TUNNEL_TOKEN>
    # Cole o token na linha de comando abaixo.
    command: tunnel --no-autoupdate run --token <COLE_SEU_TUNNEL_TOKEN_AQUI>
    networks:
      - minha-rede
    depends_on: # Garante que o django suba antes do túnel tentar se conectar
      - backend #django
      - rails

volumes:
  storage_data:
  postgres_data:
  redis_data:

networks:
  minha-rede:
    driver: bridge
