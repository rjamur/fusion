services:
  base: &base
    image: chatwoot/chatwoot:latest
    volumes:
      - storage_data:/app/storage
    env_file:
      - .env

  rails:
    <<: *base
    depends_on:
      - postgres
      - redis
    ports:
      - '127.0.0.1:3000:3000'
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - DATABASE_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=senha_do_postgres
        #entrypoint: docker/entrypoints/rails.sh
        #command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']
    command: sh -c "bundle install && bundle exec rails s -p 3000 -b 0.0.0.0"

    restart: unless-stopped
    networks:
      minha-rede:
        aliases:
          - rails.local
 
  sidekiq:
    <<: *base
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    environment:
      - RAILS_ENV=production
      - NODE_ENV=production
      - INSTALLATION_ENV=docker
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    restart: unless-stopped
    networks:
      - minha-rede
 
  postgres:
    image: pgvector/pgvector:pg16
    restart: unless-stopped
    ports:
      - '127.0.0.1:5432:5432'
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - minha-rede
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U postgres"]
       interval: 5s
       timeout: 5s
       retries: 5
 
  redis:
    image: redis:alpine
    restart: unless-stopped
    env_file: .env
    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\""]
    volumes:
      - redis_data:/data
    ports:
      - '127.0.0.1:6379:6379'
    networks:
      - minha-rede
 

  django:
    build:
      context: ./backend
    env_file:
      - .env
    ports:
      - '127.0.0.1:8000:8000'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      minha-rede:
        aliases:
          - django.local
    restart: unless-stopped

  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TOKEN}
    networks:
      - minha-rede
    depends_on:
      - django 
      - rails
    env_file:
      - .env

volumes:
  storage_data:
  postgres_data:
  redis_data:

networks:
  minha-rede:
    driver: bridge
